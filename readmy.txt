Cкрипт для збору погоди з API (наприклад, OpenWeatherMap API) і збереження даних в CSV.

---Як це працює?---
1.Запити до API забирають дані в JSON-форматі.
2.Отримані дані фільтруються (беруться тільки потрібні поля).
3.Дані зберігаються в зручному форматі (CSV).
4.Ви отримуєте готовий набір даних для аналізу або візуалізації.
---

requests – використовується для роботи з HTTP-запитами (звернення до API).
csv – потрібен для збереження даних у форматі CSV.
datetime – дозволяє отримати поточний час і дату, щоб додати мітку часу до даних.

API_KEY – це ключ доступу до API. Ви отримуєте його після реєстрації на OpenWeatherMap.
BASE_URL – це основна URL-адреса для отримання даних про погоду.
cities – список міст, для яких ми будемо отримувати погоду. Ви можете додати інші міста.

params – це словник із параметрами, які додаються до запиту:
q – назва міста.
appid – ваш API-ключ.
units – для отримання температури у градусах Цельсія.
requests.get(BASE_URL, params=params) – відправляє запит до API із зазначеними параметрами.

response.status_code – код статусу HTTP-відповіді:
200 означає успішний запит.
data = response.json() – перетворює відповідь від сервера (JSON-формат) у Python-об’єкт (словник).
Ми повертаємо потрібні дані:
city – назва міста.
temperature – температура в градусах Цельсія (data["main"]["temp"]).
humidity – вологість повітря.
description – короткий опис погоди (наприклад, "clear sky").
datetime – поточний час у форматі YYYY-MM-DD HH:MM:SS.

Ми ітеруємо список міст (cities).
Для кожного міста викликаємо get_weather(city).
Якщо дані отримано успішно, додаємо їх у список weather_data.

csv_file – назва файлу для збереження даних.
with open(...) as file – відкриває файл у режимі запису ("w") і забезпечує автоматичне закриття файлу.
csv.DictWriter – дозволяє зберігати дані у форматі CSV зі словників.
fieldnames – задає назви колонок у файлі.
writer.writeheader() – записує заголовок таблиці.
writer.writerows(weather_data) – записує всі рядки даних.